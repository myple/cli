name: Release

on:
  push:
    tags:
      - "v*"

# Serialize workflow runs
concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build-and-sign:
    name: Build and Sign Release Artifacts
    runs-on: ubuntu-latest
    permissions:
      # cosign uses the GitHub OIDC token
      id-token: write
      # needed to upload artifacts to a GH release
      contents: write

    strategy:
      matrix:
        os: [darwin, linux]
        arch: [arm64, amd64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Release Version
        run: echo RELEASE_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Build
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build ./cmd/myple

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign the images with GitHub OIDC Token
        run: cosign sign-blob -y myple --bundle cosign.bundle

      - name: Tarball
        run: |
          mkdir dist
          mv README.md LICENSE myple cosign.bundle dist/
          tar -czf myple-${{ env.RELEASE_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C dist .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: myple-${{ env.RELEASE_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: myple-${{ env.RELEASE_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  s3:
    name: Upload to S3
    runs-on: ubuntu-latest
    needs: build-and-sign

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Release Version
        run: echo RELEASE_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.RELEASE_ARTIFACTS_REPOSITORY }}
          role-session-name: GitHubActions

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Upload to S3
        run: aws s3 cp dist s3://${{ secrets.RELEASE_ARTIFACTS_REPOSITORY }} --recursive --acl public-read

  checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: build-and-sign

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Release Version
        run: echo RELEASE_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate Checksums
        run: |
          cd dist
          shasum -a 256 * > checksums-${{ env.RELEASE_VERSION }}.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ env.RELEASE_VERSION }}
          path: dist/checksums-${{ env.RELEASE_VERSION }}.txt

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: checksums

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Release Version
        run: echo RELEASE_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create Release
        run: gh release create ${{ env.RELEASE_VERSION }} dist/* --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew:
    name: Release to Homebrew
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Get Release Version
        run: echo RELEASE_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Dispatch Homebrew Update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: myple/homebrew-tap
          event-type: release
          client-payload: '{"version": "${{ env.RELEASE_VERSION }}"}'
